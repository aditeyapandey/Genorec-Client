{"ast":null,"code":"// class Dataspec {\n//     sequences = [];\n//     constructor(obj){\n//         for(let i=0;i<obj.sequences.length;i++)\n//         {\n//             this.sequences.push(new Sequence(obj.sequences[i]))\n//         }\n//     }\n//     printConfig()\n//     {\n//         return this\n//     }\n// }\nfunction Dataspec(obj) {\n  sequences = [];\n\n  for (let i = 0; i < obj.sequences.length; i++) {\n    sequences.push(Sequence(obj.sequences[i]));\n  }\n\n  return sequences;\n} // //Definition of the Sequence Specification \n//  class Sequence {\n//     sequenceName;\n//     features = [];\n//     sequenceInterconnection;\n//     constructor(obj){\n//     //We can implement a type of checker before assignment of the value    \n//     this.sequenceName = (typeof obj.sequenceName ==\"string\") ?  obj.sequenceName : (function(){throw \"Sequence name should be a string\"}());\n//     this.sequenceInterconnection = (typeof obj.sequenceInterconnection ==\"object\") ? obj.sequenceName : (function(){throw \"Interconnection should be an object\"}());\n//     //Features has to be an array\n//     for(let i=0;i<obj.features.length;i++){\n//         this.features.push(new Features(obj.features[i]));\n//     }\n//     }\n// }\n\n\nfunction Sequence(obj) {\n  var sequenceName;\n  var features = [];\n  var sequenceInterconnection; //We can implement a type of checker before assignment of the value    \n\n  sequenceName = typeof obj.sequenceName == \"string\" ? obj.sequenceName : function () {\n    throw \"Sequence name should be a string\";\n  }();\n  sequenceInterconnection = typeof obj.sequenceInterconnection == \"object\" ? obj.sequenceName : function () {\n    throw \"Interconnection should be an object\";\n  }(); //Features has to be an array\n\n  for (let i = 0; i < obj.features.length; i++) {\n    features.push(Features(obj.features[i]));\n  }\n\n  return {\n    sequenceName,\n    features,\n    sequenceInterconnection\n  };\n} // //Definition of the Feature Specification \n//  class Features{\n//     featureGranularity\n//     featureDensity\n//     attributes = []\n//     interFeatureTasks = []\n//     featureLabel \n//     featureInterconnection\n//     denseInterconnection\n//     constructor(obj){\n//         this.featureGranularity =  ([\"point\",\"interval\"].indexOf(obj.featureGranularity != -1)) ?  obj.featureGranularity : (function(){throw \"Feature Granularity must be either Point or Interval\"}());\n//         this.featureDensity =  ([\"sparse\",\"continous\"].indexOf(obj.featureDensity) != -1) ?  obj.featureDensity : (function(){throw \"Feature Density must be either Sparse or Continous\"}());\n//         this.featureLabel = obj.featureLabel\n//         this.interFeatureTasks = obj.interFeatureTasks\n//         this.featureInterconnection = (typeof obj.featureInterconnection == \"boolean\") ?  obj.featureInterconnection : (function(){throw \"Feature Interconnection must be Boolean type\"}());\n//         this.denseInterconnection = (typeof obj.denseInterconnection == \"boolean\") ? obj.denseInterconnection :  (function(){throw \"Dense Interconnection must be Boolean type\"}());\n//         for(let i=0;i<obj.attr.length;i++){\n//         this.attributes.push(new Attributes(obj.attr[i]))\n//         }    \n//     }\n// }\n\n\nfunction Features(obj) {\n  var featureGranularity;\n  var featureDensity;\n  var attributes = [];\n  var interFeatureTasks = [];\n  var featureLabel;\n  var featureInterconnection;\n  var denseInterconnection;\n  featureGranularity = [\"point\", \"interval\"].indexOf(obj.featureGranularity != -1) ? obj.featureGranularity : function () {\n    throw \"Feature Granularity must be either Point or Interval\";\n  }();\n  featureDensity = [\"sparse\", \"continous\"].indexOf(obj.featureDensity) != -1 ? obj.featureDensity : function () {\n    throw \"Feature Density must be either Sparse or Continous\";\n  }();\n  featureLabel = obj.featureLabel;\n  interFeatureTasks = obj.interFeatureTasks;\n  featureInterconnection = typeof obj.featureInterconnection == \"boolean\" ? obj.featureInterconnection : function () {\n    throw \"Feature Interconnection must be Boolean type\";\n  }();\n  denseInterconnection = typeof obj.denseInterconnection == \"boolean\" ? obj.denseInterconnection : function () {\n    throw \"Dense Interconnection must be Boolean type\";\n  }();\n\n  for (let i = 0; i < obj.attr.length; i++) {\n    attributes.push(Attributes(obj.attr[i]));\n  }\n\n  return {\n    featureGranularity,\n    featureDensity,\n    featureLabel,\n    interFeatureTasks,\n    featureInterconnection,\n    denseInterconnection,\n    attributes\n  };\n} //Definition of the Attribute Specification \n//  class Attributes{\n//     dataDescriptor\n//     dataType\n//     intraAttrTask = []\n//     interAttrTask = []\n//     constructor(obj)\n//     {\n//         this.dataDescriptor =  obj.dataDescriptor; // Allow assignment without typecheck for partial dataspec\n//         this.dataType = (typeof obj.dataType == \"string\" && [\"quantitative\",\"categorical\",\"text\"].indexOf(obj.dataType) != -1) ?  obj.dataType : (function(){throw \"Data Descriptor should be a string and should be either: Quant, Categorical or Text \"}());\n//         this.intraAttrTask = (Array.isArray(obj.intraAttrTask)) ? obj.intraAttrTask: (function(){throw \"Intra attribute tasks should be an array with one or more entries consisting indentify, compare or summarize\"}());\n//         this.interAttrTask = (Array.isArray(obj.interAttrTask)) ? obj.interAttrTask : [] // Allow assignment of [] without typecheck for partial dataspec\n//     }\n// }\n\n\nfunction Attributes(obj) {\n  var dataDescriptor;\n  var dataType;\n  var intraAttrTask = [];\n  var interAttrTask = [];\n  dataDescriptor = obj.dataDescriptor; // Allow assignment without typecheck for partial dataspec\n\n  dataType = typeof obj.dataType == \"string\" && [\"quantitative\", \"categorical\", \"text\"].indexOf(obj.dataType) != -1 ? obj.dataType : function () {\n    throw \"Data Descriptor should be a string and should be either: Quant, Categorical or Text \";\n  }();\n  intraAttrTask = Array.isArray(obj.intraAttrTask) ? obj.intraAttrTask : function () {\n    throw \"Intra attribute tasks should be an array with one or more entries consisting indentify, compare or summarize\";\n  }();\n  interAttrTask = Array.isArray(obj.interAttrTask) ? obj.interAttrTask : []; // Allow assignment of [] without typecheck for partial dataspec\n\n  return {\n    dataDescriptor,\n    dataType,\n    intraAttrTask,\n    interAttrTask\n  };\n}\n\nmodule.exports = Dataspec;","map":{"version":3,"sources":["/Users/aditeyapandey/Documents/Genorec_Client/node_modules/genorec-engine/src/dataspec.js"],"names":["Dataspec","obj","sequences","i","length","push","Sequence","sequenceName","features","sequenceInterconnection","Features","featureGranularity","featureDensity","attributes","interFeatureTasks","featureLabel","featureInterconnection","denseInterconnection","indexOf","attr","Attributes","dataDescriptor","dataType","intraAttrTask","interAttrTask","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["// class Dataspec {\n//     sequences = [];\n//     constructor(obj){\n//         for(let i=0;i<obj.sequences.length;i++)\n//         {\n//             this.sequences.push(new Sequence(obj.sequences[i]))\n//         }\n//     }\n//     printConfig()\n//     {\n//         return this\n//     }\n// }\n\nfunction Dataspec(obj) {\n    sequences = [];\n  \n    for(let i=0;i<obj.sequences.length;i++)\n    {\n        sequences.push(Sequence(obj.sequences[i]))\n    }\n\n    return sequences\n\n}\n\n\n// //Definition of the Sequence Specification \n//  class Sequence {\n//     sequenceName;\n//     features = [];\n//     sequenceInterconnection;\n//     constructor(obj){\n//     //We can implement a type of checker before assignment of the value    \n//     this.sequenceName = (typeof obj.sequenceName ==\"string\") ?  obj.sequenceName : (function(){throw \"Sequence name should be a string\"}());\n//     this.sequenceInterconnection = (typeof obj.sequenceInterconnection ==\"object\") ? obj.sequenceName : (function(){throw \"Interconnection should be an object\"}());\n//     //Features has to be an array\n//     for(let i=0;i<obj.features.length;i++){\n//         this.features.push(new Features(obj.features[i]));\n//     }\n//     }\n// }\n\nfunction Sequence(obj) {\n    var sequenceName;\n    var features = [];\n    var sequenceInterconnection;\n   \n    //We can implement a type of checker before assignment of the value    \n    sequenceName = (typeof obj.sequenceName ==\"string\") ?  obj.sequenceName : (function(){throw \"Sequence name should be a string\"}());\n    sequenceInterconnection = (typeof obj.sequenceInterconnection ==\"object\") ? obj.sequenceName : (function(){throw \"Interconnection should be an object\"}());\n    //Features has to be an array\n    for(let i=0;i<obj.features.length;i++){\n        features.push(Features(obj.features[i]));\n    }\n\n    return {sequenceName,features,sequenceInterconnection}\n}\n\n// //Definition of the Feature Specification \n//  class Features{\n//     featureGranularity\n//     featureDensity\n//     attributes = []\n//     interFeatureTasks = []\n//     featureLabel \n//     featureInterconnection\n//     denseInterconnection\n//     constructor(obj){\n//         this.featureGranularity =  ([\"point\",\"interval\"].indexOf(obj.featureGranularity != -1)) ?  obj.featureGranularity : (function(){throw \"Feature Granularity must be either Point or Interval\"}());\n//         this.featureDensity =  ([\"sparse\",\"continous\"].indexOf(obj.featureDensity) != -1) ?  obj.featureDensity : (function(){throw \"Feature Density must be either Sparse or Continous\"}());\n//         this.featureLabel = obj.featureLabel\n//         this.interFeatureTasks = obj.interFeatureTasks\n//         this.featureInterconnection = (typeof obj.featureInterconnection == \"boolean\") ?  obj.featureInterconnection : (function(){throw \"Feature Interconnection must be Boolean type\"}());\n//         this.denseInterconnection = (typeof obj.denseInterconnection == \"boolean\") ? obj.denseInterconnection :  (function(){throw \"Dense Interconnection must be Boolean type\"}());\n//         for(let i=0;i<obj.attr.length;i++){\n//         this.attributes.push(new Attributes(obj.attr[i]))\n//         }    \n//     }\n// }\n\nfunction Features(obj){\n    var featureGranularity\n    var featureDensity\n    var attributes = []\n    var interFeatureTasks = []\n    var featureLabel \n    var featureInterconnection\n    var denseInterconnection\n   \n    featureGranularity =  ([\"point\",\"interval\"].indexOf(obj.featureGranularity != -1)) ?  obj.featureGranularity : (function(){throw \"Feature Granularity must be either Point or Interval\"}());\n    featureDensity =  ([\"sparse\",\"continous\"].indexOf(obj.featureDensity) != -1) ?  obj.featureDensity : (function(){throw \"Feature Density must be either Sparse or Continous\"}());\n    featureLabel = obj.featureLabel\n    interFeatureTasks = obj.interFeatureTasks\n    featureInterconnection = (typeof obj.featureInterconnection == \"boolean\") ?  obj.featureInterconnection : (function(){throw \"Feature Interconnection must be Boolean type\"}());\n    denseInterconnection = (typeof obj.denseInterconnection == \"boolean\") ? obj.denseInterconnection :  (function(){throw \"Dense Interconnection must be Boolean type\"}());\n    for(let i=0;i<obj.attr.length;i++){\n        attributes.push(Attributes(obj.attr[i]))   \n    }\n    return {featureGranularity,featureDensity,featureLabel,interFeatureTasks,featureInterconnection,denseInterconnection,attributes}\n}\n\n//Definition of the Attribute Specification \n//  class Attributes{\n//     dataDescriptor\n//     dataType\n//     intraAttrTask = []\n//     interAttrTask = []\n\n//     constructor(obj)\n//     {\n//         this.dataDescriptor =  obj.dataDescriptor; // Allow assignment without typecheck for partial dataspec\n//         this.dataType = (typeof obj.dataType == \"string\" && [\"quantitative\",\"categorical\",\"text\"].indexOf(obj.dataType) != -1) ?  obj.dataType : (function(){throw \"Data Descriptor should be a string and should be either: Quant, Categorical or Text \"}());\n//         this.intraAttrTask = (Array.isArray(obj.intraAttrTask)) ? obj.intraAttrTask: (function(){throw \"Intra attribute tasks should be an array with one or more entries consisting indentify, compare or summarize\"}());\n//         this.interAttrTask = (Array.isArray(obj.interAttrTask)) ? obj.interAttrTask : [] // Allow assignment of [] without typecheck for partial dataspec\n//     }\n  \n// }\n\nfunction Attributes(obj){\n    var dataDescriptor\n    var dataType\n    var intraAttrTask = []\n    var interAttrTask = []\n\n\n    dataDescriptor =  obj.dataDescriptor; // Allow assignment without typecheck for partial dataspec\n    dataType = (typeof obj.dataType == \"string\" && [\"quantitative\",\"categorical\",\"text\"].indexOf(obj.dataType) != -1) ?  obj.dataType : (function(){throw \"Data Descriptor should be a string and should be either: Quant, Categorical or Text \"}());\n    intraAttrTask = (Array.isArray(obj.intraAttrTask)) ? obj.intraAttrTask: (function(){throw \"Intra attribute tasks should be an array with one or more entries consisting indentify, compare or summarize\"}());\n    interAttrTask = (Array.isArray(obj.interAttrTask)) ? obj.interAttrTask : [] // Allow assignment of [] without typecheck for partial dataspec\n    \n    return {dataDescriptor,dataType,intraAttrTask,interAttrTask}\n  \n}\n\nmodule.exports = Dataspec"]},"metadata":{},"sourceType":"script"}