{"ast":null,"code":"var Dataspec = require('./dataspec.js');\n\nvar encodeAttribute = require(\"./s1_en.js\");\n\nvar getTracks = require(\"./s2_ca.js\");\n\nvar inputData = require(\"../configuration/input.json\");\n\nvar getLayout = require(\"./s3_ls.js\");\n\nvar getAlignment = require(\"./s4_al.js\"); //Validate the input dataspecification to ensure correctness of input data\n// const dataspec = new Dataspec(inputData)\n// var result = dataspec.printConfig() \n// //First determine sequence level encoding\n// for (var i=0;i<dataspec.sequences.length;i++){\n//     //Stage 1: Encoding Selection\n//     var attributeEncoding = encodeAttribute(dataspec.sequences[i]);\n//     //Stage 2: Combining Attributes\n//     var tracks = getTracks(attributeEncoding)\n//     //Stage 3: Predict the Layout\n//     var layout = getLayout(tracks, attributeEncoding)\n//     //Stage 4: Alignment \n//     // var finalSequence = getAlignment(layout)\n// }\n\n\nfunction setInput(param) {\n  //Validate the input dataspecification to ensure correctness of input data\n  const dataspec = new Dataspec(param);\n  var result = dataspec.printConfig(); //Test output only for 1 sequence\n\n  var attributeEncoding, tracks, layout; // //First determine sequence level encoding\n\n  for (var i = 0; i < dataspec.sequences.length; i++) {\n    //Stage 1: Encoding Selection\n    attributeEncoding = encodeAttribute(dataspec.sequences[i]); //Stage 2: Combining Attributes\n\n    tracks = getTracks(attributeEncoding); //Stage 3: Predict the Layout\n\n    layout = getLayout(tracks, attributeEncoding); //Stage 4: Alignment \n    // var finalSequence = getAlignment(layout)\n  }\n\n  return {\n    attributeEncoding,\n    tracks,\n    layout\n  };\n} //Define the libary's api for external applications\n\n\nmodule.exports = {\n  setInput\n};","map":{"version":3,"sources":["/Users/aditeyapandey/Documents/Genorec-Engine/src/index.js"],"names":["Dataspec","require","encodeAttribute","getTracks","inputData","getLayout","getAlignment","setInput","param","dataspec","result","printConfig","attributeEncoding","tracks","layout","i","sequences","length","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAIC,eAAe,GAAID,OAAO,CAAC,YAAD,CAA9B;;AACA,IAAIE,SAAS,GAAIF,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,6BAAD,CAAvB;;AACA,IAAII,SAAS,GAAIJ,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,YAAD,CAA1B,C,CAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASM,QAAT,CAAkBC,KAAlB,EAAyB;AACrB;AACA,QAAMC,QAAQ,GAAG,IAAIT,QAAJ,CAAaQ,KAAb,CAAjB;AAEA,MAAIE,MAAM,GAAGD,QAAQ,CAACE,WAAT,EAAb,CAJqB,CAMrB;;AACA,MAAIC,iBAAJ,EAAsBC,MAAtB,EAA6BC,MAA7B,CAPqB,CASrB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACN,QAAQ,CAACO,SAAT,CAAmBC,MAAlC,EAAyCF,CAAC,EAA1C,EAA6C;AACzC;AACCH,IAAAA,iBAAiB,GAAGV,eAAe,CAACO,QAAQ,CAACO,SAAT,CAAmBD,CAAnB,CAAD,CAAnC,CAFwC,CAGzC;;AACCF,IAAAA,MAAM,GAAGV,SAAS,CAACS,iBAAD,CAAlB,CAJwC,CAKzC;;AACCE,IAAAA,MAAM,GAAGT,SAAS,CAACQ,MAAD,EAASD,iBAAT,CAAlB,CANwC,CAOzC;AACA;AACH;;AAED,SAAO;AAACA,IAAAA,iBAAD;AAAmBC,IAAAA,MAAnB;AAA0BC,IAAAA;AAA1B,GAAP;AACH,C,CAED;;;AACAI,MAAM,CAACC,OAAP,GAAgB;AAChBZ,EAAAA;AADgB,CAAhB","sourcesContent":["var Dataspec = require('./dataspec.js')\nvar encodeAttribute  = require(\"./s1_en.js\")\nvar getTracks  = require(\"./s2_ca.js\")\nvar inputData = require(\"../configuration/input.json\")\nvar getLayout  = require(\"./s3_ls.js\")\nvar getAlignment = require(\"./s4_al.js\")\n\n//Validate the input dataspecification to ensure correctness of input data\n// const dataspec = new Dataspec(inputData)\n\n// var result = dataspec.printConfig() \n\n// //First determine sequence level encoding\n// for (var i=0;i<dataspec.sequences.length;i++){\n//     //Stage 1: Encoding Selection\n//     var attributeEncoding = encodeAttribute(dataspec.sequences[i]);\n//     //Stage 2: Combining Attributes\n//     var tracks = getTracks(attributeEncoding)\n//     //Stage 3: Predict the Layout\n//     var layout = getLayout(tracks, attributeEncoding)\n//     //Stage 4: Alignment \n//     // var finalSequence = getAlignment(layout)\n// }\n\n\nfunction setInput(param) {\n    //Validate the input dataspecification to ensure correctness of input data\n    const dataspec = new Dataspec(param)\n\n    var result = dataspec.printConfig()\n\n    //Test output only for 1 sequence\n    var attributeEncoding,tracks,layout\n\n    // //First determine sequence level encoding\n    for (var i=0;i<dataspec.sequences.length;i++){\n        //Stage 1: Encoding Selection\n         attributeEncoding = encodeAttribute(dataspec.sequences[i]);\n        //Stage 2: Combining Attributes\n         tracks = getTracks(attributeEncoding)\n        //Stage 3: Predict the Layout\n         layout = getLayout(tracks, attributeEncoding)\n        //Stage 4: Alignment \n        // var finalSequence = getAlignment(layout)\n    }\n    \n    return {attributeEncoding,tracks,layout}\n}  \n\n//Define the libary's api for external applications\nmodule.exports ={\nsetInput\n}"]},"metadata":{},"sourceType":"script"}