{"ast":null,"code":"import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\n\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n  return mainCreateTree(spectrum[0], spectrum[1], from, to, minWindow, threshold);\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  } // search first point\n\n\n  var start = binarySearch(X, from, ascending);\n\n  if (start < 0) {\n    start = ~start;\n  } // stop at last point\n\n\n  var sum = 0;\n  var center = 0;\n\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(sum, center, mainCreateTree(X, Y, from, center, minWindow, threshold), mainCreateTree(X, Y, center, to, minWindow, threshold));\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n\n}","map":{"version":3,"sources":["/Users/aditeyapandey/Documents/Genorec-Client/node_modules/ml-tree-similarity/src/createTree.js"],"names":["binarySearch","ascending","createTree","spectrum","options","X","minWindow","threshold","from","to","length","mainCreateTree","Y","start","sum","center","i","Tree","constructor","left","right"],"mappings":"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","sourcesContent":["import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}